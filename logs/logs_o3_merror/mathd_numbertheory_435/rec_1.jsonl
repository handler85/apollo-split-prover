{"name": "mathd_numbertheory_435_1", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_1\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h₃ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (1 : ℕ)) = (1 : ℕ)) :\n  k.gcd (3 : ℕ) = (1 : ℕ) := by", "formal_proof": "\n  sorry"}
{"name": "mathd_numbertheory_435_2", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_2\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h₃ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (1 : ℕ)) = (1 : ℕ))\n  (h_gcd_k3 : k.gcd (3 : ℕ) = (1 : ℕ)) :\n  Odd k := by", "formal_proof": "\n  sorry"}
{"name": "mathd_numbertheory_435_3", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_3\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h_gcd_k3 : k.gcd (3 : ℕ) = (1 : ℕ))\n  (h_gcd_k2 : Odd k)\n  (h₃ : ∀ (n : ℕ), (n * (6 : ℕ) + k).gcd ((1 : ℕ) + n * (6 : ℕ)) = (1 : ℕ)) :\n  k % (2 : ℕ) = (1 : ℕ) := by", "formal_proof": "\n  sorry"}
{"name": "mathd_numbertheory_435_4", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_4\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h_gcd_k3 : k.gcd (3 : ℕ) = (1 : ℕ))\n  (h_gcd_k2 : Odd k)\n  (k_odd : k % (2 : ℕ) = (1 : ℕ))\n  (h₃ : ∀ (n : ℕ), (n * (6 : ℕ) + k).gcd ((1 : ℕ) + n * (6 : ℕ)) = (1 : ℕ)) :\n  ¬k % (3 : ℕ) = (0 : ℕ) := by", "formal_proof": "\n  sorry"}
{"name": "mathd_numbertheory_435_5", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_5\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h_gcd_k3 : k.gcd (3 : ℕ) = (1 : ℕ))\n  (h_gcd_k2 : Odd k)\n  (k_odd : k % (2 : ℕ) = (1 : ℕ))\n  (k_not_div3 : ¬k % (3 : ℕ) = (0 : ℕ))\n  (hk : k < (5 : ℕ))\n  (case1 : ¬k = (1 : ℕ))\n  (case2 : ¬k = (2 : ℕ))\n  (case3 : ¬k = (3 : ℕ))\n  (h₃ : ∀ (n : ℕ), (n * (6 : ℕ) + k).gcd ((1 : ℕ) + n * (6 : ℕ)) = (1 : ℕ)) :\n  ¬k = (4 : ℕ) := by", "formal_proof": "\n  sorry"}
{"name": "mathd_numbertheory_435_6", "split": "train", "header": "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\nset_option pp.instanceTypes true\nset_option pp.numericTypes true\nset_option pp.coercions.types true\nset_option pp.letVarTypes true\nset_option pp.structureInstanceTypes true\nset_option pp.instanceTypes true\nset_option pp.mvars.withType true\nset_option pp.coercions true\nset_option pp.funBinderTypes true\nset_option pp.piBinderTypes true\n", "informal_prefix": "", "formal_statement": "lemma mathd_numbertheory_435_6\n  (k : ℕ)\n  (h₀ : (0 : ℕ) < k)\n  (h₁ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (3 : ℕ)) = (1 : ℕ))\n  (h₂ : ∀ (n : ℕ), ((6 : ℕ) * n + k).gcd ((6 : ℕ) * n + (2 : ℕ)) = (1 : ℕ))\n  (h_gcd_k3 : k.gcd (3 : ℕ) = (1 : ℕ))\n  (h_gcd_k2 : Odd k)\n  (k_odd : k % (2 : ℕ) = (1 : ℕ))\n  (k_not_div3 : ¬k % (3 : ℕ) = (0 : ℕ))\n  (hk : k < (5 : ℕ))\n  (case1 : ¬k = (1 : ℕ))\n  (case2 : ¬k = (2 : ℕ))\n  (case3 : ¬k = (3 : ℕ))\n  (case4 : ¬k = (4 : ℕ))\n  (h₃ : ∀ (n : ℕ), (n * (6 : ℕ) + k).gcd ((1 : ℕ) + n * (6 : ℕ)) = (1 : ℕ)) :\n  (5 : ℕ) ≤ k := by", "formal_proof": "\n  sorry"}
