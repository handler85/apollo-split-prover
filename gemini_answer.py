import os
import google.generativeai as genai

def get_gemini_sorrified_lean_sketch(problem_name: str, nl_statement: str, formal_statement: str) -> str:
    """
    Prompts Gemini Pro 2.5 to solve a problem and generate a sorrified Lean4 proof outline
    with all necessary lemmas and steps, ensuring the Lean proof structure matches the NL solution.

    Args:
        problem_name (str): The name of the problem.
        nl_statement (str): The natural language statement of the problem.
        formal_statement (str): The formal Lean statement of the problem.

    Returns:
        str: The Lean4 proof sketch (with sorries) generated by Gemini.
    """
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("Please set the GEMINI_API_KEY environment variable.")

    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-pro")
    prompt = f"""
You are a Lean 4 proof assistant. Here is a math problem:

Problem Name: {problem_name}

```lean
{formal_statement}
```
Natural Language Statement:
{nl_statement}

Formal Lean Statement:
{formal_statement}

First, provide a step-by-step natural language solution to the problem, breaking it down into all necessary lemmas and logical steps.

Then, based on your NL solution, write a Lean 4 proof outline for the formal statement above. 
- The Lean proof should have the same structure as your NL solution, with each lemma and step reflected as a corresponding Lean lemma or proof step.
- For any step you cannot fully prove, use 'sorry' as a placeholder.
- Use clear Lean 4 syntax and include all necessary lemma statements and structure.

Output only the Lean 4 code block for the proof sketch at the end.
"""

    response = model.generate_content(prompt)
    import re
    match = re.search(r"```lean(.*?)```", response.text, re.DOTALL)
    if match:
        lean_code = match.group(1).strip()
    else:
        lean_code = response.text.strip()
    return lean_code